#!/usr/bin/env python
#
# -*- coding: CP1252 -*-
#
# generated by wxGlade 4737d780ab66 on Wed Sep 05 14:53:21 2012
#

import wx

# begin wxGlade: dependencies
# end wxGlade
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure
# begin wxGlade: extracode
# end wxGlade


class TudiPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        self.figure = Figure(figsize=(3.5, 2))   # (x,y) en inches!!
        self.axes = self.figure.add_subplot(111)
        # begin wxGlade: TudiPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.lb_type = wx.StaticText(self, wx.ID_ANY, "type")
        self.ch_type = wx.Choice(self, wx.ID_ANY, choices=["  - none -", "square root", "  squared", "    log2"])
        self.szr_3_staticbox = wx.StaticBox(self, wx.ID_ANY, "equalizer")
        self.sp_threshold = wx.SpinCtrl(self, wx.ID_ANY, "0", min=0, max=10000)
        self.sizer_4_staticbox = wx.StaticBox(self, wx.ID_ANY, "threshold")
        self.lb_zoom = wx.StaticText(self, wx.ID_ANY, "x")
        self.cbx_zoom = wx.ComboBox(self, wx.ID_ANY, choices=["10", "5", "2", "1", "0.5", "0.25", "0.1"], style=wx.CB_DROPDOWN)
        self.sizer_6_staticbox = wx.StaticBox(self, wx.ID_ANY, "zoom")
        self.bt_refresh = wx.Button(self, wx.ID_ANY, "refresh")
        self.sizer_3_staticbox = wx.StaticBox(self, wx.ID_ANY, "")
        self.toolbar = NavigationToolbar2Wx(self.canvas)
        self.lb_mr = wx.StaticText(self, wx.ID_ANY, "Mr")
        self.tc_y = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.lb_pi = wx.StaticText(self, wx.ID_ANY, "pI")
        self.tc_x = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.szr_5_staticbox = wx.StaticBox(self, wx.ID_ANY, "mouse coordinates")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        #
        self.canvas.mpl_connect('motion_notify_event', self.on_motion)
        self.xlabel = None
        self.ylabel = None
        self.x_win = (1, 5)
        self.y_win = (1, 5)

    def __set_properties(self):
        # begin wxGlade: TudiPanel.__set_properties
        self.SetBackgroundColour(wx.Colour(212, 208, 200))
        self.ch_type.SetMinSize((93, -1))
        self.ch_type.SetSelection(0)
        self.sp_threshold.SetMinSize((80, -1))
        self.cbx_zoom.SetMinSize((70, 24))
        self.cbx_zoom.SetSelection(3)
        self.bt_refresh.SetMinSize((70, -1))
        self.toolbar.SetBackgroundColour(wx.Colour(212, 208, 200))
        self.tc_y.SetMinSize((40, 21))
        self.tc_x.SetMinSize((40, 21))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TudiPanel.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        self.szr_5_staticbox.Lower()
        szr_5 = wx.StaticBoxSizer(self.szr_5_staticbox, wx.HORIZONTAL)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        self.sizer_6_staticbox.Lower()
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        self.szr_3_staticbox.Lower()
        szr_3 = wx.StaticBoxSizer(self.szr_3_staticbox, wx.HORIZONTAL)
        sizer_1.Add(self.canvas, 1, wx.EXPAND, 0)
        szr_3.Add(self.lb_type, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        szr_3.Add(self.ch_type, 0, wx.RIGHT, 5)
        sizer_3.Add(szr_3, 0, wx.EXPAND, 0)
        sizer_4.Add(self.sp_threshold, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.LEFT | wx.EXPAND, 5)
        sizer_6.Add(self.lb_zoom, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_6.Add(self.cbx_zoom, 0, 0, 0)
        sizer_3.Add(sizer_6, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 5)
        sizer_3.Add(self.bt_refresh, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.ALIGN_CENTER_VERTICAL, 7)
        sizer_1.Add(sizer_3, 0, wx.EXPAND, 0)
        sizer_5.Add(self.toolbar, 0, wx.TOP | wx.EXPAND, 9)
        sizer_5.Add((55, 20), 0, wx.EXPAND, 0)
        szr_5.Add(self.lb_mr, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        szr_5.Add(self.tc_y, 0, wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        szr_5.Add(self.lb_pi, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 5)
        szr_5.Add(self.tc_x, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(szr_5, 0, wx.LEFT | wx.RIGHT, 10)
        sizer_5.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_5, 0, wx.LEFT | wx.EXPAND, 4)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        # end wxGlade
        #
    def on_motion(self, evt):
        if evt.inaxes:
            self.tc_x.SetValue('%.1f' % evt.xdata)
            self.tc_y.SetValue('%.1f' % evt.ydata)
        #
    # noinspection PyUnusedLocal
    def draw(self, hold=False):
        """"""
        if not hold:
            self.axes.clear()
        self.axes.set_xlabel(self.xlabel)
        self.axes.set_ylabel(self.ylabel)
        #
        self.canvas.draw()
# end of class TudiPanel


#
if __name__ == '__main__':

    class AFrame(wx.Frame):
        def __init__(self, *args, **kwargs):
            Panel = kwargs.pop('panel')
            wx.Frame.__init__(self, *args, **kwargs)
            self.panel = Panel(self)

    app = wx.PySimpleApp()
    AFrame(None, panel=TudiPanel).Show()
    # noinspection PyUnresolvedReferences
    app.MainLoop()
